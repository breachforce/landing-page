---
// Import the highlight data directly from your local JSON file.
// Astro handles the import and parsing automatically.
import highlights from '../data/highlights.json';

// Define the structure for a single highlight for TypeScript safety
interface Highlight {
  caption: string;
  postUrl: string;
  thumbnailUrl: string;
  imageUrls: string[];
}
---

<section class="highlights">
  <div class="container">
    <h2 class="section-title">Past Highlights</h2>
    <p class="section-subtitle">Showcasing real-world cybersecurity insights from our community.</p>
  </div>
  
  <div class="carousel-wrapper">
    <button class="carousel-nav carousel-prev" id="carousel-prev">‹</button>
    <button class="carousel-nav carousel-next" id="carousel-next">›</button>
    <div class="carousel-track" id="carousel-track">
      <!-- We map over the highlights twice for the infinite scroll effect -->
      {[...highlights, ...highlights].map((highlight: Highlight, index) => (
        <div 
          class="highlight-card" 
          data-post-url={highlight.postUrl}
          data-images={JSON.stringify(highlight.imageUrls)}
          data-caption={highlight.caption}
        >
          <div class="highlight-image">
            <img src={highlight.thumbnailUrl} alt={highlight.caption} loading="lazy" />
          </div>
          <p class="highlight-caption">{highlight.caption}</p>
        </div>
      ))}
    </div>
  </div>
</section>

<!-- This is the popup modal that will show the images -->
<div id="highlight-modal" class="modal-overlay" style="display: none;">
  <div class="modal-content">
    <button id="modal-close" class="modal-close-button">&times;</button>
    <h3 id="modal-caption"></h3>
    <div id="modal-images"></div>
    <a id="modal-linkedin-link" href="#" target="_blank" rel="noopener noreferrer" class="linkedin-link">
      View on LinkedIn ↗
    </a>
  </div>
</div>

<style>
/* --- Component styles --- */
.highlights { background-color: #0f0f10; overflow: hidden; padding: 5rem 0; }
.container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }
.section-title { font-family: 'Fira Mono', monospace; font-size: 2rem; font-weight: 500; color: #fbf3fa; margin-bottom: 0.5rem; }
.section-subtitle { font-family: 'Fira Sans', sans-serif; color: #e0d6de; margin-bottom: 3rem; font-size: 1.1rem; }
.carousel-wrapper { position: relative; width: 100%; overflow: hidden; }
.carousel-track { display: flex; gap: 1.5rem; padding: 0 1.5rem; transition: transform 0.5s ease; }
.carousel-track.auto-scroll { animation: scroll 60s linear infinite; }
.carousel-track:hover { animation-play-state: paused; }
.highlight-card { flex: 0 0 auto; width: 400px; cursor: pointer; transition: transform 0.3s ease; }
.highlight-card:hover { transform: translateY(-5px); }
.highlight-image { width: 100%; height: 250px; overflow: hidden; border-radius: 8px; background: #201e25; }
.highlight-image img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
.highlight-card:hover .highlight-image img { transform: scale(1.05); }
.highlight-caption { margin-top: 1rem; font-family: 'Fira Sans', sans-serif; font-size: 0.9rem; color: #e0d6de; line-height: 1.4; }

/* Navigation buttons */
.carousel-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(255, 107, 216, 0.8);
  color: white;
  border: none;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  font-size: 1.5rem;
  cursor: pointer;
  z-index: 10;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.carousel-nav:hover {
  background-color: rgba(255, 107, 216, 1);
  transform: translateY(-50%) scale(1.1);
}

.carousel-prev {
  left: 1rem;
}

.carousel-next {
  right: 1rem;
}

@keyframes scroll {
  0% { transform: translateX(0); }
  100% { transform: translateX(-50%); }
}

/* --- Modal styles --- */
.modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); display: none; align-items: center; justify-content: center; z-index: 1000; backdrop-filter: blur(5px); }
.modal-content { background-color: #201e25; padding: 2rem; border-radius: 8px; max-width: 90vw; max-height: 90vh; overflow-y: auto; position: relative; color: #fbf3fa; width: 800px; }
.modal-close-button { position: absolute; top: 1rem; right: 1rem; background: none; border: none; color: #fff; font-size: 2rem; cursor: pointer; }
#modal-caption { font-family: 'Fira Mono', monospace; font-size: 1.5rem; margin-bottom: 1.5rem; }
#modal-images { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; }
#modal-images img { width: 100%; border-radius: 4px; }
.linkedin-link { display: inline-block; margin-top: 1.5rem; color: #ff6bd8; font-family: 'Fira Sans', sans-serif; text-decoration: none; font-weight: 600; }
.linkedin-link:hover { text-decoration: underline; }

/* --- Responsive styles --- */
@media (max-width: 768px) {
  .highlight-card { width: 300px; }
  .modal-content { width: 90vw; }
  .carousel-nav {
    width: 40px;
    height: 40px;
    font-size: 1.2rem;
  }
  .carousel-prev { left: 0.5rem; }
  .carousel-next { right: 0.5rem; }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('highlight-modal') as HTMLElement;
  const modalCloseBtn = document.getElementById('modal-close') as HTMLElement;
  const modalCaption = document.getElementById('modal-caption') as HTMLElement;
  const modalImagesContainer = document.getElementById('modal-images') as HTMLElement;
  const modalLink = document.getElementById('modal-linkedin-link') as HTMLAnchorElement;
  const highlightCards = document.querySelectorAll('.highlight-card');
  
  // Carousel navigation
  const carouselTrack = document.getElementById('carousel-track') as HTMLElement;
  const prevBtn = document.getElementById('carousel-prev') as HTMLElement;
  const nextBtn = document.getElementById('carousel-next') as HTMLElement;
  
  let currentPosition = 0;
  const cardWidth = 400 + 24; // card width + gap
  const totalCards = highlightCards.length / 2; // Since we duplicate for infinite scroll
  let isAutoScrolling = true;
  
  // Start auto-scroll
  const startAutoScroll = () => {
    carouselTrack.classList.add('auto-scroll');
    isAutoScrolling = true;
  };
  
  // Stop auto-scroll
  const stopAutoScroll = () => {
    carouselTrack.classList.remove('auto-scroll');
    isAutoScrolling = false;
  };
  
  // Manual navigation
  const moveCarousel = (direction: number) => {
    stopAutoScroll();
    currentPosition += direction * cardWidth;
    
    // Reset position if we've gone too far
    if (currentPosition < -cardWidth * totalCards) {
      currentPosition = 0;
    } else if (currentPosition > 0) {
      currentPosition = -cardWidth * totalCards;
    }
    
    carouselTrack.style.transform = `translateX(${currentPosition}px)`;
    
    // Resume auto-scroll after 3 seconds of inactivity
    setTimeout(() => {
      if (!isAutoScrolling) {
        carouselTrack.style.transform = '';
        startAutoScroll();
      }
    }, 3000);
  };
  
  // Event listeners for navigation
  prevBtn.addEventListener('click', () => moveCarousel(1));
  nextBtn.addEventListener('click', () => moveCarousel(-1));
  
  // Start with auto-scroll
  startAutoScroll();
  
  // Pause auto-scroll on hover
  carouselTrack.addEventListener('mouseenter', stopAutoScroll);
  carouselTrack.addEventListener('mouseleave', () => {
    setTimeout(() => {
      if (!isAutoScrolling) {
        carouselTrack.style.transform = '';
        startAutoScroll();
      }
    }, 1000);
  });

  // Modal functionality
  highlightCards.forEach(card => {
    card.addEventListener('click', () => {
      const cardElement = card as HTMLElement;
      const images = JSON.parse(cardElement.dataset.images || '[]');
      const caption = cardElement.dataset.caption || '';
      const postUrl = cardElement.dataset.postUrl || '#';

      modalCaption.textContent = caption;
      modalLink.href = postUrl;
      modalImagesContainer.innerHTML = '';

      images.forEach((src: string) => {
        const img = document.createElement('img');
        img.src = src;
        img.alt = caption;
        img.loading = 'lazy';
        modalImagesContainer.appendChild(img);
      });

      modal.style.display = 'flex';
    });
  });

  const closeModal = () => {
    modal.style.display = 'none';
  };

  modalCloseBtn.addEventListener('click', closeModal);
  
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      closeModal();
    }
  });
});
</script>
