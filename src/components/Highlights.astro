---
// Import the highlight data directly from your local JSON file.
// Astro handles the import and parsing automatically.
import highlights from '../data/highlights.json';
import { Image } from 'astro:assets';

// Define the structure for a single highlight for TypeScript safety
interface Highlight {
  caption: string;
  postUrl: string;
  thumbnailUrl: string;
  imageUrls: string[];
}
---

<section class="highlights">
  <div class="container">
    <h2 class="section-title">Past Highlights</h2>
    <p class="section-subtitle">Showcasing real-world cybersecurity insights from our community.</p>
  </div>
  
    <div class="carousel-wrapper">
      <button
        class="carousel-nav carousel-prev"
        id="carousel-prev"
        aria-label="Previous slide"
      >
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M15.75 19.5L8.25 12l7.5-7.5"
          />
        </svg>
      </button>
      <button
        class="carousel-nav carousel-next"
        id="carousel-next"
        aria-label="Next slide"
      >
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M8.25 4.5l7.5 7.5-7.5 7.5"
          />
        </svg>
      </button>
      <div class="carousel-container">
        <div class="carousel-track" id="carousel-track">
        {highlights.map((highlight: Highlight, index) => (
          <div 
            class="highlight-card" 
            data-post-url={highlight.postUrl}
            data-images={JSON.stringify(highlight.imageUrls)}
            data-caption={highlight.caption}
          >
            <div class="highlight-image">
              <Image 
                src={highlight.thumbnailUrl} 
                alt={highlight.caption} 
                width={400}
                height={225}
                loading="lazy"
                format="webp"
              />
            </div>
            <p class="highlight-caption">{highlight.caption}</p>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Progress indicators with counter -->
    <div class="carousel-indicators" id="carousel-indicators">
      <!-- Dots will be dynamically generated -->
    </div>
    <div class="carousel-counter" id="carousel-counter">
      <span id="current-slide">1</span> / <span id="total-slides">{highlights.length}</span>
    </div>
  </div>
</section>

<!-- This is the popup modal that will show the images -->
<div id="highlight-modal" class="modal-overlay" style="display: none;">
  <div class="modal-content">
    <button id="modal-close" class="modal-close-button">&times;</button>
    <h3 id="modal-caption"></h3>
    <div id="modal-images"></div>
    <a id="modal-linkedin-link" href="#" target="_blank" rel="noopener noreferrer" class="linkedin-link">
      View on LinkedIn â†—
    </a>
  </div>
</div>

<style>
/* --- Component styles --- */
.highlights { 
  background-color: #0f0f10; 
  overflow: hidden; 
  padding: 5rem 0; 
}

.container { 
  max-width: 1200px; 
  margin: 0 auto; 
  padding: 0 1rem; 
}

.section-title { 
  font-family: 'Fira Mono', monospace; 
  font-size: 2rem; 
  font-weight: 500; 
  color: #fbf3fa; 
  margin-bottom: 0.5rem; 
}

.section-subtitle { 
  font-family: 'Fira Sans', sans-serif; 
  color: #e0d6de; 
  margin-bottom: 3rem; 
  font-size: 1.1rem; 
}

.carousel-wrapper { 
  position: relative; 
  width: 100%; 
  max-width: 1200px;
  margin: 0 auto;
}

.carousel-container {
  overflow: hidden;
  position: relative;
}

.carousel-track { 
  display: flex; 
  gap: 1.5rem; 
  padding: 0 1.5rem;
  transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  will-change: transform;
}

.highlight-card {
  flex: 0 0 auto;
  width: 400px;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  border-radius: 8px;
  overflow: hidden;
  background: linear-gradient(145deg, #1f1a24, #15131a);
  border: 1px solid rgba(134, 74, 249, 0.15);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
}

.highlight-card:hover {
  transform: translateY(-8px) scale(1.03);
  box-shadow: 0 20px 40px rgba(134, 74, 249, 0.4);
}

.highlight-image {
  width: 100%;
  aspect-ratio: 16 / 9;
  overflow: hidden;
  background: #201e25;
  position: relative;
}

.highlight-image img { 
  width: 100%; 
  height: 100%; 
  object-fit: cover; 
  transition: transform 0.3s ease;
}

.highlight-card:hover .highlight-image img { 
  transform: scale(1.08);
}

.highlight-caption { 
  margin: 1rem; 
  font-family: 'Fira Sans', sans-serif; 
  font-size: 0.9rem; 
  color: #e0d6de; 
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Navigation buttons */
.carousel-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: linear-gradient(135deg, rgba(134, 74, 249, 0.95), rgba(81, 40, 136, 0.95));
  color: #fbf3fa;
  border: 1px solid rgba(255, 255, 255, 0.1);
  width: 56px;
  height: 56px;
  border-radius: 50%;
  cursor: pointer;
  z-index: 10;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 16px rgba(134, 74, 249, 0.3);
  backdrop-filter: blur(6px);
}

.carousel-nav svg {
  width: 24px;
  height: 24px;
}

.carousel-nav:hover {
  transform: translateY(-50%) scale(1.1);
  box-shadow: 0 6px 24px rgba(134, 74, 249, 0.5);
}

.carousel-nav:active {
  transform: translateY(-50%) scale(0.95);
}

.carousel-nav:disabled {
  opacity: 0.3;
  cursor: not-allowed;
  transform: translateY(-50%) scale(0.9);
}

.carousel-prev {
  left: -20px;
}

.carousel-next {
  right: -20px;
}

/* Progress indicators - limited to max 5 dots */
.carousel-indicators {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1.5rem;
}

.indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  border: 2px solid #864af9;
  background: rgba(134, 74, 249, 0.2);
  cursor: pointer;
  transition: all 0.3s ease;
}

.indicator.active {
  background: #864af9;
  transform: scale(1.2);
}

.indicator:hover {
  background: rgba(134, 74, 249, 0.5);
}

/* Counter display */
.carousel-counter {
  display: flex;
  justify-content: center;
  margin-top: 1rem;
  font-family: 'Fira Mono', monospace;
  color: #e0d6de;
  font-size: 0.9rem;
}

#current-slide {
  color: #864af9;
  font-weight: bold;
}

/* --- Modal styles --- */
.modal-overlay { 
  position: fixed; 
  top: 0; 
  left: 0; 
  width: 100%; 
  height: 100%; 
  background-color: rgba(0, 0, 0, 0.8); 
  display: none; 
  align-items: center; 
  justify-content: center; 
  z-index: 1000; 
  backdrop-filter: blur(5px); 
}

.modal-content { 
  background-color: #201e25; 
  padding: 2rem; 
  border-radius: 8px; 
  max-width: 90vw; 
  max-height: 90vh; 
  overflow-y: auto; 
  position: relative; 
  color: #fbf3fa; 
  width: 800px; 
}

.modal-close-button { 
  position: absolute; 
  top: 1rem; 
  right: 1rem; 
  background: none; 
  border: none; 
  color: #fff; 
  font-size: 2rem; 
  cursor: pointer; 
}

#modal-caption { 
  font-family: 'Fira Mono', monospace; 
  font-size: 1.5rem; 
  margin-bottom: 1.5rem; 
}

#modal-images { 
  display: grid; 
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
  gap: 1rem; 
}

#modal-images img { 
  width: 100%; 
  border-radius: 4px; 
}

.linkedin-link { 
  display: inline-block; 
  margin-top: 1.5rem; 
  color: #864af9; 
  font-family: 'Fira Sans', sans-serif; 
  text-decoration: none; 
  font-weight: 600; 
}

.linkedin-link:hover { 
  text-decoration: underline; 
}

/* --- Responsive styles --- */
  @media (max-width: 768px) {
    .highlight-card {
      width: 300px;
    }

    .modal-content {
      width: 90vw;
    }

    .carousel-nav {
      width: 48px;
      height: 48px;
    }

    .carousel-prev {
      left: -10px;
    }

    .carousel-next {
      right: -10px;
    }
  }

  @media (max-width: 480px) {
    .highlight-card {
      width: 280px;
    }

    .carousel-nav {
      width: 40px;
      height: 40px;
    }

    .carousel-prev {
      left: 0;
    }

    .carousel-next {
      right: 0;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('highlight-modal') as HTMLElement;
  const modalCloseBtn = document.getElementById('modal-close') as HTMLElement;
  const modalCaption = document.getElementById('modal-caption') as HTMLElement;
  const modalImagesContainer = document.getElementById('modal-images') as HTMLElement;
  const modalLink = document.getElementById('modal-linkedin-link') as HTMLAnchorElement;
  const highlightCards = document.querySelectorAll('.highlight-card');
  
  // Carousel navigation
  const carouselTrack = document.getElementById('carousel-track') as HTMLElement;
  const prevBtn = document.getElementById('carousel-prev') as HTMLButtonElement;
  const nextBtn = document.getElementById('carousel-next') as HTMLButtonElement;
  const indicatorsContainer = document.getElementById('carousel-indicators') as HTMLElement;
  const currentSlideSpan = document.getElementById('current-slide') as HTMLElement;
  const totalSlidesSpan = document.getElementById('total-slides') as HTMLElement;
  
  let currentIndex = 0;
  const totalCards = highlightCards.length;
  const cardWidth = 400 + 24; // card width + gap
  const visibleCards = Math.floor(window.innerWidth / cardWidth);
  const maxIndex = Math.max(0, totalCards - visibleCards);
  
  // Movement settings - move by 2 or 3 cards at a time
  const getMovementStep = () => {
    if (window.innerWidth < 768) return 1; // Mobile: move 1 at a time
    if (window.innerWidth < 1024) return 2; // Tablet: move 2 at a time
    return 3; // Desktop: move 3 at a time
  };
  
  // Indicator settings
  const MAX_INDICATORS = 5;
  const showIndicators = totalCards <= MAX_INDICATORS;
  
  // Initialize indicators
  const initializeIndicators = () => {
    indicatorsContainer.innerHTML = '';
    
    if (showIndicators) {
      // Show all indicators if total is 5 or less
      for (let i = 0; i < totalCards; i++) {
        const indicator = document.createElement('button');
        indicator.className = 'indicator';
        indicator.dataset.index = i.toString();
        indicator.addEventListener('click', () => goToSlide(i));
        indicatorsContainer.appendChild(indicator);
      }
    } else {
      // Show sliding window of 5 indicators
      for (let i = 0; i < MAX_INDICATORS; i++) {
        const indicator = document.createElement('button');
        indicator.className = 'indicator';
        indicator.addEventListener('click', () => {
          const targetIndex = getIndicatorTargetIndex(i);
          goToSlide(targetIndex);
        });
        indicatorsContainer.appendChild(indicator);
      }
    }
  };
  
  // Get target index for indicator click in sliding window mode
  const getIndicatorTargetIndex = (indicatorIndex: number) => {
    if (showIndicators) return indicatorIndex;
    
    const windowStart = Math.max(0, Math.min(currentIndex - 2, totalCards - MAX_INDICATORS));
    return windowStart + indicatorIndex;
  };
  
  // Update indicators based on current position
  const updateIndicators = () => {
    const indicators = indicatorsContainer.querySelectorAll('.indicator');
    
    if (showIndicators) {
      // Simple case: highlight current indicator
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === currentIndex);
      });
    } else {
      // Sliding window: calculate which indicators to show
      const windowStart = Math.max(0, Math.min(currentIndex - 2, totalCards - MAX_INDICATORS));
      const windowEnd = windowStart + MAX_INDICATORS;
      
      indicators.forEach((indicator, index) => {
        const targetIndex = windowStart + index;
        indicator.classList.toggle('active', targetIndex === currentIndex);
        
        // Add visual hint for first/last when at edges
        if (windowStart === 0 && index === 0) {
          (indicator as HTMLElement).style.opacity = '1';
        } else if (windowEnd === totalCards && index === MAX_INDICATORS - 1) {
          (indicator as HTMLElement).style.opacity = '1';
        } else {
          (indicator as HTMLElement).style.opacity = targetIndex === currentIndex ? '1' : '0.7';
        }
      });
    }
  };
  
  // Update carousel position
  const updateCarousel = () => {
    const translateX = -currentIndex * cardWidth;
    carouselTrack.style.transform = `translateX(${translateX}px)`;
    
    // Update indicators
    updateIndicators();
    
    // Update counter
    currentSlideSpan.textContent = (currentIndex + 1).toString();
    
    // Update button states
    prevBtn.disabled = currentIndex === 0;
    nextBtn.disabled = currentIndex >= maxIndex;
  };
  
  // Go to specific slide
  const goToSlide = (index: number) => {
    currentIndex = Math.max(0, Math.min(index, maxIndex));
    updateCarousel();
  };
  
  // Navigation functions with multi-step movement
  const goToPrev = () => {
    if (currentIndex > 0) {
      const step = getMovementStep();
      const newIndex = Math.max(0, currentIndex - step);
      goToSlide(newIndex);
    }
  };
  
  const goToNext = () => {
    if (currentIndex < maxIndex) {
      const step = getMovementStep();
      const newIndex = Math.min(maxIndex, currentIndex + step);
      goToSlide(newIndex);
    }
  };
  
  // Event listeners
  prevBtn.addEventListener('click', goToPrev);
  nextBtn.addEventListener('click', goToNext);
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') goToPrev();
    if (e.key === 'ArrowRight') goToNext();
  });
  
  // Touch/swipe support
  let startX = 0;
  let isDragging = false;
  
  carouselTrack.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    isDragging = true;
  });
  
  carouselTrack.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    e.preventDefault();
  });
  
  carouselTrack.addEventListener('touchend', (e) => {
    if (!isDragging) return;
    isDragging = false;
    
    const endX = e.changedTouches[0].clientX;
    const diffX = startX - endX;
    
    if (Math.abs(diffX) > 50) {
      if (diffX > 0) goToNext();
      else goToPrev();
    }
  });
  
  // Mouse drag support
  let mouseStartX = 0;
  let isMouseDragging = false;
  
  carouselTrack.addEventListener('mousedown', (e) => {
    mouseStartX = e.clientX;
    isMouseDragging = true;
    carouselTrack.style.cursor = 'grabbing';
  });
  
  carouselTrack.addEventListener('mousemove', (e) => {
    if (!isMouseDragging) return;
    e.preventDefault();
  });
  
  carouselTrack.addEventListener('mouseup', (e) => {
    if (!isMouseDragging) return;
    isMouseDragging = false;
    carouselTrack.style.cursor = 'grab';
    
    const diffX = mouseStartX - e.clientX;
    
    if (Math.abs(diffX) > 50) {
      if (diffX > 0) goToNext();
      else goToPrev();
    }
  });
  
  carouselTrack.addEventListener('mouseleave', () => {
    isMouseDragging = false;
    carouselTrack.style.cursor = 'grab';
  });
  
  // Auto-play functionality with faster movement
  let autoPlayInterval: NodeJS.Timeout;
  
  const startAutoPlay = () => {
    autoPlayInterval = setInterval(() => {
      if (currentIndex >= maxIndex) {
        goToSlide(0);
      } else {
        goToNext();
      }
    }, 3500); // Reduced time for faster auto-play
  };
  
  const stopAutoPlay = () => {
    clearInterval(autoPlayInterval);
  };
  
  // Initialize everything
  initializeIndicators();
  totalSlidesSpan.textContent = totalCards.toString();
  
  // Start auto-play
  startAutoPlay();
  
  // Pause auto-play on hover
  carouselTrack.addEventListener('mouseenter', stopAutoPlay);
  carouselTrack.addEventListener('mouseleave', startAutoPlay);
  
  // Initialize carousel
  updateCarousel();
  
  // Responsive updates
  window.addEventListener('resize', () => {
    const newVisibleCards = Math.floor(window.innerWidth / cardWidth);
    const newMaxIndex = Math.max(0, totalCards - newVisibleCards);
    
    if (currentIndex > newMaxIndex) {
      goToSlide(newMaxIndex);
    } else {
      updateCarousel();
    }
  });

  // Modal functionality
  highlightCards.forEach(card => {
    card.addEventListener('click', () => {
      const cardElement = card as HTMLElement;
      const images = JSON.parse(cardElement.dataset.images || '[]');
      const caption = cardElement.dataset.caption || '';
      const postUrl = cardElement.dataset.postUrl || '#';

      modalCaption.textContent = caption;
      modalLink.href = postUrl;
      modalImagesContainer.innerHTML = '';

      images.forEach((src: string) => {
        const img = document.createElement('img');
        img.src = src;
        img.alt = caption;
        img.loading = 'lazy';
        modalImagesContainer.appendChild(img);
      });

      modal.style.display = 'flex';
      stopAutoPlay();
    });
  });

  const closeModal = () => {
    modal.style.display = 'none';
    startAutoPlay();
  };

  modalCloseBtn.addEventListener('click', closeModal);
  
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      closeModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && modal.style.display === 'flex') {
      closeModal();
    }
  });
});
</script>
